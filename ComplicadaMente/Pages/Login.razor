@page "/"
@page "/login"
@layout MainLayout
@using Microsoft.EntityFrameworkCore
@inject ComplicadaMenteContext Context
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject UserStateService UserState
@using System.ComponentModel.DataAnnotations

<PageTitle>Login</PageTitle>

<style>
  .login-form {
    background-color: #fff;
    padding: 2.5rem 2rem;
    border-radius: 16px;
    box-shadow: 0 4px 24px rgba(0, 122, 204, 0.10), 0 1.5px 6px rgba(0,0,0,0.07);
    width: 340px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-top: 32px;
    margin-bottom: 32px;
  }

  h2 {
    color: #007acc;
    font-weight: bold;
    margin-bottom: 1.2rem;
    letter-spacing: 1px;
  }

  label {
    display: block;
    margin-top: 10px;
    font-weight: 500;
    color: #333;
    margin-bottom: 2px;
  }

  input {
    padding: 10px;
    margin-top: 5px;
    border-radius: 6px;
    border: 1px solid #bcdffb;
    background: #f8f9fa;
    font-size: 1rem;
    transition: border-color 0.2s;
  }

  input:focus {
    border-color: #007acc;
    outline: none;
    background: #fff;
  }

  button {
    margin-top: 20px;
    padding: 10px;
    background-color: #007acc;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: bold;
    font-size: 1rem;
    box-shadow: 0 2px 8px rgba(0,122,204,0.08);
    transition: background-color 0.2s;
  }

  button:hover {
    background-color: #005fa3;
  }

  .text-danger {
    color: #d9534f;
    font-size: 0.95em;
    margin-top: 5px;
    text-align: center;
  }

  .loading {
    opacity: 0.6;
    pointer-events: none;
  }
</style>

<div class="container d-flex justify-content-center align-items-center" style="min-height: 80vh;">
    <div class="login-form @(isLoading ? "loading" : "")">
        <h2>Login</h2>

        @if (!string.IsNullOrEmpty(ErroMensagem))
        {
            <div class="text-danger">@ErroMensagem</div>
        }

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            
            <label>Email</label>
            <InputText @bind-Value="loginModel.Email" type="email" disabled="@isLoading" />
            <ValidationMessage For="@(() => loginModel.Email)" />

            <label>Password</label>
            <InputText @bind-Value="loginModel.Password" type="password" disabled="@isLoading" />
            <ValidationMessage For="@(() => loginModel.Password)" />

            <button type="submit" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>Entrando...</span>
                }
                else
                {
                    <span>Entrar</span>
                }
            </button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? ErroMensagem;
    private bool isLoading = false;

    public class LoginModel
    {
        [Required(ErrorMessage = "Email é obrigatório")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password é obrigatória")]
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        ErroMensagem = null;
        isLoading = true;

        try
        {
            // check if it's a funcionario
            var funcionario = await Context.Funcionarios
                .FirstOrDefaultAsync(f => f.Email == loginModel.Email);

            // if funcionario is found, verify password
            if (funcionario != null)
            {
                if (string.IsNullOrEmpty(funcionario.Password))
                {
                    ErroMensagem = "Funcionário sem password configurada.";
                    return;
                }

                // verify password
                if (!BCrypt.Net.BCrypt.Verify(loginModel.Password, funcionario.Password))
                {
                    ErroMensagem = "Password incorreta.";
                    return;
                }

                // store funcionario information
                UserState.SetUser(
                    funcionario.Id.ToString(),
                    funcionario.Nome ?? "",
                    "admin",
                    funcionario.Email ?? ""
                );

                // redirect to admin dashboard
                Navigation.NavigateTo("/admin/products", true);
                return;
            }

            // check if it's a Utilizador
            var utilizador = await Context.Utilizadores
                .FirstOrDefaultAsync(u => u.Email == loginModel.Email);

            // if utilizador is found, verify password
            if (utilizador != null)
            {
                if (string.IsNullOrEmpty(utilizador.Password))
                {
                    ErroMensagem = "Utilizador sem password configurada.";
                    return;
                }

                // verify password
                if (!BCrypt.Net.BCrypt.Verify(loginModel.Password, utilizador.Password))
                {
                    ErroMensagem = "Password incorreta.";
                    return;
                }

                // store utilizador information
                UserState.SetUser(
                    utilizador.Id.ToString(),
                    utilizador.Nome ?? "",
                    "client",
                    utilizador.Email ?? ""
                );

                // redirect to shop page
                Navigation.NavigateTo("/shop", true);
                return;
            }

            ErroMensagem = "Email não encontrado.";
        }
        catch (Exception ex)
        {
            ErroMensagem = $"Erro durante o login: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
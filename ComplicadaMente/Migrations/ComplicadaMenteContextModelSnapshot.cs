// <auto-generated />
using System;
using ComplicadaMente.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComplicadaMente.Migrations
{
    [DbContext(typeof(ComplicadaMenteContext))]
    partial class ComplicadaMenteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ComplicadaMente.Models.Encomenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DataEncomenda")
                        .HasColumnType("date")
                        .HasColumnName("Data_Encomenda");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("PrecoTotal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Preco_Total");

                    b.Property<int>("UtilizadorId")
                        .HasColumnType("int")
                        .HasColumnName("ID_Utilizador");

                    b.HasKey("Id");

                    b.HasIndex("UtilizadorId");

                    b.ToTable("Encomenda");
                });

            modelBuilder.Entity("ComplicadaMente.Models.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salario")
                        .HasColumnType("decimal(9, 2)");

                    b.HasKey("Id");

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("ComplicadaMente.Models.ManualStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Imagem")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuebraCabecaId")
                        .HasColumnType("int");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuebraCabecaId");

                    b.ToTable("ManualSteps");
                });

            modelBuilder.Entity("ComplicadaMente.Models.Peca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("nvarchar(130)");

                    b.Property<byte[]>("Imagem")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("QuebraCabecaId")
                        .HasColumnType("int")
                        .HasColumnName("ID_Quebra_Cabeca");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("QuebraCabecaId");

                    b.ToTable("Peca");
                });

            modelBuilder.Entity("ComplicadaMente.Models.PecaEncomenda", b =>
                {
                    b.Property<int>("EncomendaId")
                        .HasColumnType("int")
                        .HasColumnName("ID_Encomenda");

                    b.Property<int>("PecaId")
                        .HasColumnType("int")
                        .HasColumnName("ID_Peca");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EncomendaId", "PecaId");

                    b.HasIndex("PecaId");

                    b.ToTable("Peca_Encomenda");
                });

            modelBuilder.Entity("ComplicadaMente.Models.QuebraCabeca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("nvarchar(130)");

                    b.Property<byte[]>("Imagem")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Quebra_Cabeca");
                });

            modelBuilder.Entity("ComplicadaMente.Models.QuebraCabecaEncomenda", b =>
                {
                    b.Property<int>("EncomendaId")
                        .HasColumnType("int")
                        .HasColumnName("ID_Encomenda");

                    b.Property<int>("QuebraCabecaId")
                        .HasColumnType("int")
                        .HasColumnName("ID_Quebra_Cabeca");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EncomendaId", "QuebraCabecaId");

                    b.HasIndex("QuebraCabecaId");

                    b.ToTable("Quebra_Cabeca_Encomenda");
                });

            modelBuilder.Entity("ComplicadaMente.Models.Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Utilizador");
                });

            modelBuilder.Entity("ComplicadaMente.Models.Encomenda", b =>
                {
                    b.HasOne("ComplicadaMente.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("ComplicadaMente.Models.ManualStep", b =>
                {
                    b.HasOne("ComplicadaMente.Models.QuebraCabeca", "QuebraCabeca")
                        .WithMany()
                        .HasForeignKey("QuebraCabecaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuebraCabeca");
                });

            modelBuilder.Entity("ComplicadaMente.Models.Peca", b =>
                {
                    b.HasOne("ComplicadaMente.Models.QuebraCabeca", "QuebraCabeca")
                        .WithMany()
                        .HasForeignKey("QuebraCabecaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuebraCabeca");
                });

            modelBuilder.Entity("ComplicadaMente.Models.PecaEncomenda", b =>
                {
                    b.HasOne("ComplicadaMente.Models.Encomenda", "Encomenda")
                        .WithMany("PecaEncomendas")
                        .HasForeignKey("EncomendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplicadaMente.Models.Peca", "Peca")
                        .WithMany("PecaEncomendas")
                        .HasForeignKey("PecaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encomenda");

                    b.Navigation("Peca");
                });

            modelBuilder.Entity("ComplicadaMente.Models.QuebraCabecaEncomenda", b =>
                {
                    b.HasOne("ComplicadaMente.Models.Encomenda", "Encomenda")
                        .WithMany("QuebraCabecaEncomendas")
                        .HasForeignKey("EncomendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplicadaMente.Models.QuebraCabeca", "QuebraCabeca")
                        .WithMany("QuebraCabecaEncomendas")
                        .HasForeignKey("QuebraCabecaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encomenda");

                    b.Navigation("QuebraCabeca");
                });

            modelBuilder.Entity("ComplicadaMente.Models.Encomenda", b =>
                {
                    b.Navigation("PecaEncomendas");

                    b.Navigation("QuebraCabecaEncomendas");
                });

            modelBuilder.Entity("ComplicadaMente.Models.Peca", b =>
                {
                    b.Navigation("PecaEncomendas");
                });

            modelBuilder.Entity("ComplicadaMente.Models.QuebraCabeca", b =>
                {
                    b.Navigation("QuebraCabecaEncomendas");
                });
#pragma warning restore 612, 618
        }
    }
}
